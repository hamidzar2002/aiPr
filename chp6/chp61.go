package chp6

import (
	"aiPr/chp3"
	"aiPr/chp4"
	"aiPr/chp5"
	"fmt"
	gp "gonum.org/v1/plot"
	"gonum.org/v1/plot/plotter"
	t "gorgonia.org/tensor"
	"image/color"
	"os"
	"time"
)

var cmap = map[float64]color.Color{
	0: color.RGBA{0, 0, 255, 255},
	1: color.RGBA{255, 0, 0, 255},
	2: color.RGBA{0, 255, 0, 255},
}

func RunOptFunc1() {

	defer func(timer time.Time) {

		fmt.Println("  chapter 3  Training : ", time.Since(timer))
	}(time.Now())
	//fmt.Println(y, x)
	p := gp.New()
	for key, element := range cmap {
		xys := plotter.XYs{}
		for i := range x {
			if y[i] == key {
				xys = append(
					xys,
					plotter.XY{X: x[i][0], Y: x[i][1]},
				)
			}

		}

		scatter, err := plotter.NewScatter(xys)
		handleErr(err)
		scatter.Color = element

		p.Add(scatter)
	}

	wt, err := p.WriterTo(300, 300, "png")
	handleErr(err)
	path := "plotOpt.png"
	f, err := os.Create(path)
	handleErr(err)
	defer func() {
		err = f.Close()
		handleErr(err)
	}()
	wt.WriteTo(f)
	return

	return
}

func RunOptFunc2() {
	//layer 1
	dense1 := chp3.NewLayerDense(2, 3)
	activation1 := chp4.NewActivationReLU()
	//layer 2
	dense2 := chp3.NewLayerDense(3, 3)
	activation2 := chp4.NewActivationSoftMax()
	loss := chp5.Loss{}
	dense1.Forward(TX)
	activation1.Forward(dense1.Output)

	dense2.Forward(activation1.Output)
	activation2.Forward(dense2.Output, 1)

	fmt.Println(dense1.Output)
	//fmt.Println(activation2.Output)

	lss := loss.Calculate(activation2.Output, TYY)
	fmt.Println(lss)
}

func RunOptFunc3() {

	// Helper variables
	lowestLoss := 9999999.0
	activation1 := chp4.NewActivationReLU()
	activation2 := chp4.NewActivationSoftMax()

	// Initialize best weights and biases
	var bestDense1Weights t.Tensor //:= t.New(t.WithShape(2, 3), t.Of(t.Float64), t.WithBacking(randMat64(2, 3, 1)))
	var bestDense1Biases []float64
	var bestDense2Weights t.Tensor // := t.New(t.WithShape(3, 3), t.Of(t.Float64), t.WithBacking(randMat64(3, 3, 1)))
	var bestDense2Biases []float64
	dense1 := chp3.NewLayerDense(2, 3)
	dense2 := chp3.NewLayerDense(3, 3)
	var dense1Weights t.Tensor
	var dense2Weights t.Tensor
	var dense1Biases []float64
	var dense2Biases []float64

	bestDense1Weights = dense1.Weights
	bestDense1Biases = make([]float64, len(dense1.Biases))
	copy(bestDense1Biases, dense1.Biases)
	bestDense2Weights = dense2.Weights
	bestDense2Biases = make([]float64, len(dense2.Biases))
	copy(bestDense2Biases, dense2.Biases)

	for iteration := 0; iteration < 10000; iteration++ {
		// Generate a new set of weights and biases
		dense1Weights = t.New(t.WithShape(2, 3), t.Of(t.Float64), t.WithBacking(randMat64(2, 3, 0.05)))
		dense1Biases = randMat64(1, 3, 0.05)
		dense2Weights = t.New(t.WithShape(3, 3), t.Of(t.Float64), t.WithBacking(randMat64(3, 3, 0.05)))
		dense2Biases = randMat64(1, 3, 0.05)

		//fmt.Println("bef", dense2.Weights.Data().([]float64)[0])
		//fmt.Println("bef", dense2.Weights.Data().([]float64)[0])
		//fmt.Println("bef", dense2.Weights.Data().([]float64)[0])
		//fmt.Println("bef", dense2.Biases[0])
		//fmt.Println("bef", dense2.Biases[0])

		//layer 1

		//dense1.Weights = dense1Weights

		dense1.Weights, _ = t.Add(dense1.Weights, dense1Weights)

		//dense1.Biases = dense1Biases
		dense1.Biases = func(biases []float64, b []float64) []float64 {
			for i := range biases {
				biases[i] = biases[i] + b[i]
			}
			return biases
		}(dense1.Biases, dense1Biases)

		//layer 2
		//dense2.Weights = dense2Weights
		dense2.Weights, _ = t.Add(dense2.Weights, dense2Weights)
		//dense2.Biases = dense2Biases
		dense2.Biases = func(biases []float64, b []float64) []float64 {
			for i := range biases {
				biases[i] = biases[i] + b[i]
			}
			return biases
		}(dense2.Biases, dense2Biases)

		dense1.Forward(TX)
		//dense1.Forward(chp3.X)
		activation1.Forward(dense1.Output)
		dense2.Forward(activation1.Output)
		activation2.Forward(dense2.Output, 1)

		loss := chp5.Loss{}
		lss := loss.Calculate(activation2.Output, TYY)
		//lss := loss.Calculate(activation2.Output, chp3.YY)
		//fmt.Println(lss)

		predictions, _ := t.Argmax(activation2.Output, 1)
		accuracy := accuracy(predictions.Data().([]int), y)

		if lss < lowestLoss {
			fmt.Println("New set of weights found, iteration:", iteration, "loss:", lss, "acc:", accuracy)
			bestDense1Weights = dense1.Weights
			bestDense1Biases = make([]float64, len(dense1.Biases))
			copy(bestDense1Biases, dense1.Biases)
			bestDense2Weights = dense2.Weights
			bestDense2Biases = make([]float64, len(dense2.Biases))
			copy(bestDense2Biases, dense2.Biases)
			lowestLoss = lss

		} else {
			//fmt.Println("adjust", dense1.Biases[0], dense2.Biases[0])
			dense1.Weights = bestDense1Weights
			//dense1.Biases = bestDense1Biases
			dense1.Biases = make([]float64, len(bestDense1Biases))
			copy(dense1.Biases, bestDense1Biases)
			dense2.Weights = bestDense2Weights
			dense2.Biases = make([]float64, len(bestDense2Biases))
			copy(dense2.Biases, bestDense2Biases)
		}

	}
	fmt.Println(bestDense1Weights, bestDense2Weights, bestDense1Biases, bestDense2Biases)
}

func handleErr(er error) {
	if er != nil {
		fmt.Println("error", er)
	}
}

func randMat64(r, c int, scale float64) []float64 {
	mat := make([]float64, r*c)
	x := t.Random(t.Float64, r*c)

	for i := range x.([]float64) {

		mat[i] = scale * x.([]float64)[i]
	}
	return mat
}

// accuracy function
func accuracy(predictions []int, y []float64) float64 {
	var correct int
	for i, pred := range predictions {
		if float64(pred) == y[i] {
			correct++
		}
	}
	return float64(correct) / float64(len(y))
}

var x = [][]float64{{0.17640524, 0.6883151},
	{0.04001572, 0.3652241},
	{0.0978738, 0.3729515},
	{0.22408931, 0.5969397},
	{0.1867558, 0.38268766},
	{-0.09772779, 0.6943621},
	{0.09500884, 0.4586381},
	{-0.01513572, 0.42525452},
	{-0.01032189, 0.69229424},
	{0.04105985, 0.6480515},
	{0.01440436, 0.6867559},
	{0.14542735, 0.5906045},
	{0.07610377, 0.41387743},
	{0.0121675, 0.6910065},
	{0.04438632, 0.47319967},
	{0.03336744, 0.5802456},
	{0.14940791, 0.5947252},
	{-0.02051583, 0.48449898},
	{0.03130677, 0.5614079},
	{-0.08540957, 0.59222066},
	{-0.25529897, 0.53764254},
	{0.06536186, 0.39005992},
	{0.08644363, 0.52982384},
	{-0.07421651, 0.6326386},
	{0.22697547, 0.4305432},
	{-0.14543657, 0.48503655},
	{0.00457585, 0.45648465},
	{-0.01871839, 0.6849264},
	{0.15327792, 0.56722945},
	{0.14693588, 0.5407462},
	{0.01549474, 0.42300838},
	{0.03781625, 0.5539249},
	{-0.08877858, 0.43256673},
	{-0.19807965, 0.50318307},
	{-0.03479122, 0.43641537},
	{0.0156349, 0.56764334},
	{0.12302907, 0.5576591},
	{0.12023798, 0.4791701},
	{-0.03873268, 0.5396007},
	{-0.03023027, 0.39069384},
	{-0.1048553, 0.35087425},
	{-0.1420018, 0.5439392},
	{-0.17062703, 0.51666737},
	{0.19507754, 0.56350315},
	{-0.05096522, 0.7383145},
	{-0.04380743, 0.594448},
	{-0.12527953, 0.40871778},
	{0.07774904, 0.6117016},
	{-0.16138978, 0.36840928},
	{-0.02127403, 0.45384154},
	{-0.08954666, 0.49317583},
	{0.03869025, 0.67133427},
	{-0.05108051, 0.4255245},
	{-0.11806323, 0.41735613},
	{-0.00281822, 0.49015474},
	{0.04283319, 0.43365216},
	{0.00665172, 0.61266357},
	{0.03024719, 0.39200684},
	{-0.06343221, 0.38525313},
	{-0.03627412, 0.456218},
	{-0.06724604, 0.45019674},
	{-0.03595532, 0.6929532},
	{-0.08131463, 0.5949421},
	{-0.17262827, 0.50875515},
	{0.01774262, 0.37745646},
	{-0.04017809, 0.5844363},
	{-0.16301984, 0.39997846},
	{0.04627823, 0.34552288},
	{-0.09072984, 0.61880296},
	{0.00519454, 0.53169423},
	{0.07290906, 0.5920859},
	{0.01289829, 0.53187275},
	{0.11394008, 0.58568305},
	{-0.12348258, 0.43489742},
	{0.04023416, 0.39657572},
	{-0.06848101, 0.56815946},
	{-0.08707972, 0.41965902},
	{-0.05788497, 0.43104503},
	{-0.03115525, 0.45444676},
	{0.00561653, 0.5017479},
	{-0.11651498, 0.46460062},
	{0.09008265, 0.36250487},
	{0.04656624, 0.43563816},
	{-0.15362437, 0.27765965},
	{0.14882521, 0.5625231},
	{0.18958892, 0.33979422},
	{0.11787796, 0.38956165},
	{-0.01799248, 0.5052165},
	{-0.10707527, 0.4260437},
	{0.10544517, 0.65430146},
	{-0.0403177, 0.3707143},
	{0.1222445, 0.5267051},
	{0.0208275, 0.49607173},
	{0.0976639, 0.38319066},
	{0.03563664, 0.5523277},
	{0.07065732, 0.48284537},
	{0.00105, 0.5771791},
	{0.17858706, 0.58235043},
	{0.01269121, 0.7163236},
	{0.04019894, 0.6336528},
	{0.29641515, 0.3693473},
	{0.30939543, 0.6658131},
	{0.4432993, 0.4881836},
	{0.3988597, 0.43198216},
	{0.3973465, 0.5666383},
	{0.17163774, 0.45392802},
	{0.33090073, 0.36657417},
	{0.25953025, 0.36532825},
	{0.3613258, 0.5693773},
	{0.3235183, 0.48404264},
	{0.42435125, 0.48662984},
	{0.36505517, 0.6077744},
	{0.41196615, 0.38731742},
	{0.28669143, 0.42693222},
	{0.23888871, 0.46151203},
	{0.29232836, 0.5094352},
	{0.3316313, 0.49578285},
	{0.3712485, 0.47131127},
	{0.55926424, 0.49383736},
	{0.32910764, 0.48926947},
	{0.23773885, 0.42803955},
	{0.29873517, 0.4187007},
	{0.28697374, 0.52745163},
	{0.3814815, 0.4109085},
	{0.17925364, 0.38426447},
	{0.33965954, 0.46877077},
	{0.348984, 0.4842333},
	{0.35655144, 0.72567236},
	{0.27360174, 0.42952996},
	{0.30954117, 0.5943261},
	{0.19092725, 0.57471883},
	{0.28400135, 0.3811055},
	{0.2790472, 0.5773253},
	{0.37493834, 0.38161194},
	{0.2177151, 0.23408276},
	{0.41145316, 0.56063193},
	{0.4827818, 0.32441092},
	{0.12633485, 0.5450934},
	{0.37595922, 0.4315989},
	{0.40102416, 0.66595507},
	{0.26958963, 0.6068509},
	{0.29360616, 0.45466143},
	{0.3200453, 0.43121624},
	{0.30355427, 0.37859225},
	{0.30243206, 0.45590773},
	{0.16573296, 0.47196445},
	{0.4485665, 0.46353066},
	{0.4412952, 0.51567036},
	{0.2519969, 0.55785215},
	{0.18669091, 0.53496546},
	{0.38543984, 0.4235856},
	{0.27575454, 0.35622084},
	{0.34752867, 0.6364532},
	{0.3014005, 0.43105507},
	{0.40248722, 0.43477064},
	{0.40280825, 0.44788107},
	{0.2607736, 0.31569302},
	{0.19499694, 0.4522026},
	{0.1750395, 0.4520344},
	{0.39437127, 0.5620358},
	{0.21444741, 0.56984574},
	{0.28265172, 0.5003771},
	{0.27370194, 0.5931848},
	{0.3280766, 0.5339965},
	{0.13970536, 0.4984318},
	{0.3522112, 0.51609284},
	{0.38572246, 0.48093465},
	{0.34217554, 0.46051505},
	{0.30224472, 0.47322664},
	{0.34307337, 0.38719887},
	{0.37323797, 0.52804416},
	{0.05607405, 0.40068763},
	{0.5289246, 0.5841631},
	{0.37234268, 0.47505414},
	{0.26809248, 0.5049495},
	{0.294238, 0.5493837},
	{0.38270754, 0.5643315},
	{0.32172295, 0.34293765},
	{0.1302649, 0.47930962},
	{0.53978264, 0.5880179},
	{0.32227927, 0.3301894},
	{0.43535063, 0.53872806},
	{0.26412836, 0.27444357},
	{0.48697105, 0.3977493},
	{0.3619677, 0.50386304},
	{0.39421773, 0.33432847},
	{0.228808, 0.4014489},
	{0.45444787, 0.3528165},
	{0.40231517, 0.6648135},
	{0.46351796, 0.51642275},
	{0.2705246, 0.556729},
	{0.28523064, 0.47773248},
	{0.563725, 0.46465683},
	{0.22733176, 0.33835256},
	{0.3197384, 0.47081625},
	{0.4470225, 0.42385077},
	{0.34310585, 0.5857924},
	{0.3916287, 0.6141102},
	{0.29338843, 0.6466579},
	{0.37033892, 0.5852552},
	{0.6068013, 0.5382732},
	{0.555077, 0.49657577},
	{0.743333, 0.6096347},
	{0.70229596, 0.4765784},
	{0.48981285, 0.46525493},
	{0.70221484, 0.44187316},
	{0.74811864, 0.33673656},
	{0.67255926, 0.3432232},
	{0.6481613, 0.3820842},
	{0.58590186, 0.6301428},
	{0.5220132, 0.58952606},
	{0.7466965, 0.6374964},
	{0.63575524, 0.36677885},
	{0.64332, 0.30313754},
	{0.8399388, 0.43399435},
	{0.7351168, 0.5175819},
	{0.7037492, 0.549869},
	{0.68087286, 0.60479724},
	{0.81866616, 0.52842796},
	{0.8386256, 0.6742669},
	{0.7596172, 0.47773942},
	{0.72488916, 0.40869206},
	{0.45720637, 0.3318782},
	{0.6790389, 0.41110286},
	{0.653656, 0.5242118},
	{0.676062, 0.41112798},
	{0.7609713, 0.59367424},
	{0.39269897, 0.6412328},
	{0.6097355, 0.26304132},
	{0.6936571, 0.5864052},
	{0.6199821, 0.2760396},
	{0.5249761, 0.5401499},
	{0.75356305, 0.62248707},
	{0.6943539, 0.5064856},
	{0.56955624, 0.3720311},
	{0.6981484, 0.44145688},
	{0.74882525, 0.47383547},
	{0.667196, 0.48177552},
	{0.7467232, 0.4797103},
	{0.6744927, 0.48901173},
	{0.6271438, 0.521348},
	{0.5507246, 0.37914264},
	{0.6580736, 0.475798},
	{0.68609595, 0.65182614},
	{0.75424993, 0.46153545},
	{0.65515596, 0.45561638},
	{0.71240824, 0.60781974},
	{0.5702055, 0.24408153},
	{0.58840376, 0.61813784},
	{0.6556277, 0.43680963},
	{0.56120384, 0.5163928},
	{0.74869144, 0.5096321},
	{0.71297973, 0.5942468},
	{0.69457626, 0.47324052},
	{0.7005571, 0.43219742},
	{0.8687711, 0.6297846},
	{0.61978024, 0.2635826},
	{0.44652253, 0.5020334},
	{0.6865967, 0.36520743},
	{0.6616063, 0.42384267},
	{0.6149148, 0.7011257},
	{0.5687837, 0.49554047},
	{0.6227477, 0.519507},
	{0.6848005, 0.3218437},
	{0.61638504, 0.42709553},
	{0.9079121, 0.51965576},
	{0.57061625, 0.5354758},
	{0.58735496, 0.56168866},
	{0.4378047, 0.5008628},
	{0.69181514, 0.5527004},
	{0.46502602, 0.5453782},
	{0.6127212, 0.31702596},
	{0.63909966, 0.50370055},
	{0.5956939, 0.5767902},
	{0.84055394, 0.558988},
	{0.7661061, 0.4636141},
	{0.7985804, 0.41943735},
	{0.5784248, 0.3881688},
	{0.7795261, 0.4868946},
	{0.71626675, 0.613308},
	{0.74380726, 0.30481958},
	{0.7696106, 0.43401083},
	{0.57579035, 0.38601977},
	{0.6242349, 0.57849574},
	{0.7529263, 0.44456905},
	{0.40110478, 0.45293623},
	{0.8179995, 0.47830504},
	{0.7219799, 0.54453933},
	{0.66209626, 0.4607611},
	{0.6887174, 0.1953857},
	{0.56367314, 0.5543312},
	{0.6316723, 0.5439043},
	{0.77669513, 0.4780459},
	{0.7964689, 0.39159635},
	{0.9362891, 0.535178},
	{0.6592742, 0.5379236},
	{0.60081136, 0.4529967},
	{0.6152433, 0.47832686},
	{0.5648625, 0.40698433},
	{0.6588812, 0.48214108}}
var y = []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}

func getBacking(x [][]float64) (backing []float64) {
	backing = make([]float64, len(x)*len(x[0]))

	for i := range x {
		for j := range x[i] {
			backing[i*len(x[0])+j] = x[i][j]
		}
	}
	fmt.Println(backing[0], backing[1], backing[599])
	return
}

var TX t.Tensor = t.New(t.WithShape(len(x), len(x[0])), t.WithBacking(getBacking(x)))
var TYY t.Tensor = t.New(t.WithShape(len(y), 1), t.WithBacking(y))
